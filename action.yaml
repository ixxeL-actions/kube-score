---
name: Kube-score
description: Kubernetes object analysis with recommendations for improved reliability and security.
author: ixxeL
inputs:
  format:
    description: Format result. [human,ci,json]
    required: false
    default: human
  verbose:
    description: Enable verbose output.
    required: false
    default: 'true'
  kube-version:
    description: Setting the kubernetes-version will affect the checks ran against the manifests.
    required: false
    default: v1.18
  warning-fail:
    description: Exit with code 1 in case of warnings.
    required: false
    default: 'false'
  exit-zero:
    description: Force exit 0 code
    required: false
    default: 'true'
  working-dir:
    description: file to scan
    required: false
    default: ./*.yaml

runs:
  using: composite
  steps:
  - id: kube-score
    run: |
      set +e
      echo -e "${BLUE}[ STEP - IaC security scan ] > IaC code security scan with Kube-score.${BLANK}"
      echo -e "${CYAN}[ INFO ] > Kube-score version.${BLANK}"
      kube-score version

      echo -e "${YELLOW}[ EXECUTING ] > Executing Kube-score IaC test on ${{ inputs.working-dir }}.${BLANK}"
      if [[ "${{ inputs.verbose }}" = "true" ]]
      then
        VERBOSE="--verbose"
      else
        VERBOSE=""
      fi

      if [[ "${{ inputs.warning-fail }}" = "true" ]]
      then
        WARN="--exit-one-on-warning"
      else
        WARN=""
      fi

      if [[ "${{ inputs.format }}" = "json" ]]
      then
        echo -e "${CYAN}[ INFO ] > Using JSON format.${BLANK}"
        kube-score score --output-format=${{ inputs.format }} \
                         --kubernetes-version=${{ inputs.kube-version }} \
                         ${VERBOSE} \
                         ${WARN} \
                         ${{ inputs.working-dir }} | jq -C
      else
        echo -e "${CYAN}[ INFO ] > Using HUMAN/CI format.${BLANK}"
        kube-score score --output-format=${{ inputs.format }} \
                         --kubernetes-version=${{ inputs.kube-version }} \
                         ${VERBOSE} \
                         ${WARN} \
                         ${{ inputs.working-dir }}
      fi

      EXIT_CODE="${PIPESTATUS[0]}"
      if [[ ${EXIT_CODE} -ne 0 && ${{ inputs.exit-zero }} != true ]]
      then
        echo -e "${RED}[ FAIL ] > Kube-score IaC scan failed.${BLANK}"
        exit ${EXIT_CODE}
      else
        echo -e "${GREEN}[ SUCCESS ] > Kube-score IaC scan succeeded.${BLANK}"
      fi
    shell: script --return --quiet --command "bash {0}"
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m
